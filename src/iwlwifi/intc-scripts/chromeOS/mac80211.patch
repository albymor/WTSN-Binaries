diff --git a/net/mac80211/Makefile b/net/mac80211/Makefile
index 703b892b3a7f..08c4dad751f0 100644
--- a/net/mac80211/Makefile
+++ b/net/mac80211/Makefile
@@ -1,5 +1,5 @@
 # SPDX-License-Identifier: GPL-2.0
-obj-$(CPTCFG_MAC80211) += mac80211.o
+obj-$(CPTCFG_MAC80211) += iwl7000_mac80211.o
 
 # mac80211 objects
 mac80211-y := \
@@ -54,6 +54,9 @@ mac80211-$(CONFIG_PM) += pm.o
 CFLAGS_trace.o := -I$(src)
 subdir-ccflags-y += $(call cc-option,-Wimplicit-fallthrough)
 
+CFLAGS_tx.o += -include "hdrs/iwl-tx.h"
+CFLAGS_debugfs.o += -include "hdrs/net/fq.h"
+
 rc80211_minstrel-y := \
 	rc80211_minstrel.o \
 	rc80211_minstrel_ht.o
@@ -65,3 +68,7 @@ rc80211_minstrel-$(CPTCFG_MAC80211_DEBUGFS) += \
 mac80211-$(CPTCFG_MAC80211_RC_MINSTREL) += $(rc80211_minstrel-y)
 
 ccflags-y += -DDEBUG
+
+mac80211-y += backports.o cfg-utils.o reg.o
+
+iwl7000_mac80211-objs := $(mac80211-objs) $(mac80211-y)
diff --git a/net/mac80211/cfg.c b/net/mac80211/cfg.c
index fb5cadc0302c..1a8607210a05 100644
--- a/net/mac80211/cfg.c
+++ b/net/mac80211/cfg.c
@@ -28,6 +28,7 @@ static void ieee80211_set_mu_mimo_follow(struct ieee80211_sub_if_data *sdata,
 	bool mu_mimo_groups = false;
 	bool mu_mimo_follow = false;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,12,0)
 	if (params->vht_mumimo_groups) {
 		u64 membership;
 
@@ -44,6 +45,7 @@ static void ieee80211_set_mu_mimo_follow(struct ieee80211_sub_if_data *sdata,
 		       WLAN_MEMBERSHIP_LEN);
 		mu_mimo_groups = membership != 0;
 	}
+#endif
 
 	if (params->vht_mumimo_follow_addr) {
 		mu_mimo_follow =
@@ -252,11 +254,13 @@ static int ieee80211_nan_change_conf(struct wiphy *wiphy,
 	if (changes & CFG80211_NAN_CONF_CHANGED_BANDS)
 		new_conf.bands = conf->bands;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(99,0,0)
 	if (changes & CFG80211_NAN_CONF_CHANGED_CDW_2G)
 		new_conf.cdw_2g = conf->cdw_2g;
 
 	if (changes & CFG80211_NAN_CONF_CHANGED_CDW_5G)
 		new_conf.cdw_5g = conf->cdw_5g;
+#endif
 
 	ret = drv_nan_change_conf(sdata->local, sdata, &new_conf, changes);
 	if (!ret)
@@ -356,6 +360,7 @@ static int ieee80211_set_noack_map(struct wiphy *wiphy,
 	return 0;
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 static int ieee80211_set_tx(struct ieee80211_sub_if_data *sdata,
 			    const u8 *mac_addr, u8 key_idx)
 {
@@ -385,6 +390,7 @@ static int ieee80211_set_tx(struct ieee80211_sub_if_data *sdata,
 	mutex_unlock(&local->key_mtx);
 	return ret;
 }
+#endif
 
 static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 			     u8 key_idx, bool pairwise, const u8 *mac_addr,
@@ -400,9 +406,10 @@ static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 	if (!ieee80211_sdata_running(sdata))
 		return -ENETDOWN;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (pairwise && params->mode == NL80211_KEY_SET_TX)
 		return ieee80211_set_tx(sdata, mac_addr, key_idx);
-
+#endif
 	/* reject WEP and TKIP keys if WEP failed to initialize */
 	switch (params->cipher) {
 	case WLAN_CIPHER_SUITE_WEP40:
@@ -434,9 +441,10 @@ static int ieee80211_add_key(struct wiphy *wiphy, struct net_device *dev,
 	if (pairwise)
 		key->conf.flags |= IEEE80211_KEY_FLAG_PAIRWISE;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->mode == NL80211_KEY_NO_TX)
 		key->conf.flags |= IEEE80211_KEY_FLAG_NO_AUTO_TX;
-
+#endif
 	mutex_lock(&local->sta_mtx);
 
 	if (mac_addr) {
@@ -722,8 +730,9 @@ void sta_set_rate_info_tx(struct sta_info *sta,
 }
 
 static int ieee80211_dump_station(struct wiphy *wiphy, struct net_device *dev,
-				  int idx, u8 *mac, struct station_info *sinfo)
+				  int idx, u8 *mac, cfg_station_info_t *cfginfo)
 {
+	struct station_info _sinfo = {}, *sinfo = &_sinfo;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
 	struct sta_info *sta;
@@ -740,20 +749,28 @@ static int ieee80211_dump_station(struct wiphy *wiphy, struct net_device *dev,
 
 	mutex_unlock(&local->sta_mtx);
 
+	iwl7000_convert_sinfo(sinfo, cfginfo);
+
 	return ret;
 }
 
 static int ieee80211_dump_survey(struct wiphy *wiphy, struct net_device *dev,
-				 int idx, struct survey_info *survey)
+				 int idx, cfg_survey_info_t *cfgsurvey)
 {
 	struct ieee80211_local *local = wdev_priv(dev->ieee80211_ptr);
+	struct survey_info _survey = {}, *survey = &_survey;
+	int ret;
 
-	return drv_get_survey(local, idx, survey);
+	ret = drv_get_survey(local, idx, survey);
+	iwl7000_convert_survey_info(survey, cfgsurvey);
+	return ret;
 }
 
 static int ieee80211_get_station(struct wiphy *wiphy, struct net_device *dev,
-				 const u8 *mac, struct station_info *sinfo)
+				 const_since_3_16 u8 *mac,
+				 cfg_station_info_t *cfginfo)
 {
+	struct station_info _sinfo = {}, *sinfo = &_sinfo;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
 	struct ieee80211_local *local = sdata->local;
 	struct sta_info *sta;
@@ -769,6 +786,8 @@ static int ieee80211_get_station(struct wiphy *wiphy, struct net_device *dev,
 
 	mutex_unlock(&local->sta_mtx);
 
+	iwl7000_convert_sinfo(sinfo, cfginfo);
+
 	return ret;
 }
 
@@ -989,7 +1008,7 @@ static int ieee80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 	if (old)
 		return -EALREADY;
 
-	switch (params->smps_mode) {
+	switch (cfg80211_ap_settings_smps_mode(params)) {
 	case NL80211_SMPS_OFF:
 		sdata->smps_mode = IEEE80211_SMPS_OFF;
 		break;
@@ -1463,6 +1482,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 	if (params->listen_interval >= 0)
 		sta->listen_interval = params->listen_interval;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->sta_modify_mask & STATION_PARAM_APPLY_STA_TXPOWER) {
 		sta->sta.txpwr.type = params->txpwr.type;
 		if (params->txpwr.type == NL80211_TX_POWER_LIMITED)
@@ -1471,7 +1491,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 		if (ret)
 			return ret;
 	}
-
+#endif
 	if (params->supported_rates && params->supported_rates_len) {
 		ieee80211_parse_bitrates(&sdata->vif.bss_conf.chandef,
 					 sband, params->supported_rates,
@@ -1488,11 +1508,14 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 		ieee80211_vht_cap_ie_to_sta_vht_cap(sdata, sband,
 						    params->vht_capa, sta);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,19,0)
 	if (params->he_capa)
 		ieee80211_he_cap_ie_to_sta_he_cap(sdata, sband,
 						  (void *)params->he_capa,
 						  params->he_capa_len, sta);
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(3,14,0)
 	if (params->opmode_notif_used) {
 		/* returned value is only needed for rc update, but the
 		 * rc isn't initialized here yet, so ignore it
@@ -1500,6 +1523,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 		__ieee80211_vht_handle_opmode(sdata, sta, params->opmode_notif,
 					      sband->band);
 	}
+#endif
 
 	if (params->support_p2p_ps >= 0)
 		sta->sta.support_p2p_ps = params->support_p2p_ps;
@@ -1507,9 +1531,10 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 	if (ieee80211_vif_is_mesh(&sdata->vif))
 		sta_apply_mesh_params(local, sta, params);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (params->airtime_weight)
 		sta->airtime_weight = params->airtime_weight;
-
+#endif
 	/* set the STA state after all sta info from usermode has been set */
 	if (test_sta_flag(sta, WLAN_STA_TDLS_PEER) ||
 	    set & BIT(NL80211_STA_FLAG_ASSOCIATED)) {
@@ -1522,7 +1547,7 @@ static int sta_apply_parameters(struct ieee80211_local *local,
 }
 
 static int ieee80211_add_station(struct wiphy *wiphy, struct net_device *dev,
-				 const u8 *mac,
+				 const_since_3_16 u8 *mac,
 				 struct station_parameters *params)
 {
 	struct ieee80211_local *local = wiphy_priv(wiphy);
@@ -1591,8 +1616,20 @@ static int ieee80211_add_station(struct wiphy *wiphy, struct net_device *dev,
 }
 
 static int ieee80211_del_station(struct wiphy *wiphy, struct net_device *dev,
+/* upstream from 3.19, but backported to ChromeOS 3.18 */
+#if CFG80211_VERSION >= KERNEL_VERSION(3,18,0)
 				 struct station_del_parameters *params)
+#else
+				 u8 *mac)
+#endif
 {
+#if CFG80211_VERSION < KERNEL_VERSION(3,18,0)
+	struct {
+		const_since_3_16 u8 *mac;
+	} _params = {
+		.mac = mac,
+	}, *params = &_params;
+#endif
 	struct ieee80211_sub_if_data *sdata;
 
 	sdata = IEEE80211_DEV_TO_SUB_IF(dev);
@@ -1605,7 +1642,8 @@ static int ieee80211_del_station(struct wiphy *wiphy, struct net_device *dev,
 }
 
 static int ieee80211_change_station(struct wiphy *wiphy,
-				    struct net_device *dev, const u8 *mac,
+				    struct net_device *dev,
+				    const_since_3_16 u8 *mac,
 				    struct station_parameters *params)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
@@ -2895,11 +2933,13 @@ static int ieee80211_set_bitrate_mask(struct wiphy *wiphy,
 		int j;
 
 		sdata->rc_rateidx_mask[i] = mask->control[i].legacy;
+#if CFG80211_VERSION >= KERNEL_VERSION(3,14,0)
 		memcpy(sdata->rc_rateidx_mcs_mask[i], mask->control[i].ht_mcs,
 		       sizeof(mask->control[i].ht_mcs));
 		memcpy(sdata->rc_rateidx_vht_mcs_mask[i],
 		       mask->control[i].vht_mcs,
 		       sizeof(mask->control[i].vht_mcs));
+#endif
 
 		sdata->rc_has_mcs_mask[i] = false;
 		sdata->rc_has_vht_mcs_mask[i] = false;
@@ -3827,6 +3867,7 @@ static int ieee80211_set_multicast_to_unicast(struct wiphy *wiphy,
 	return 0;
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_fill_txq_stats(struct cfg80211_txq_stats *txqstats,
 			      struct txq_info *txqi)
 {
@@ -3919,6 +3960,7 @@ out:
 
 	return ret;
 }
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 
 static int
 ieee80211_get_ftm_responder_stats(struct wiphy *wiphy,
@@ -4044,7 +4086,9 @@ const struct cfg80211_ops mac80211_config_ops = {
 	.del_nan_func = ieee80211_del_nan_func,
 	.set_multicast_to_unicast = ieee80211_set_multicast_to_unicast,
 	.tx_control_port = ieee80211_tx_control_port,
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	.get_txq_stats = ieee80211_get_txq_stats,
+#endif
 	.get_ftm_responder_stats = ieee80211_get_ftm_responder_stats,
 	.start_pmsr = ieee80211_start_pmsr,
 	.abort_pmsr = ieee80211_abort_pmsr,
diff --git a/net/mac80211/ibss.c b/net/mac80211/ibss.c
index 4c3415db42bc..abb332af0aff 100644
--- a/net/mac80211/ibss.c
+++ b/net/mac80211/ibss.c
@@ -1767,10 +1767,12 @@ int ieee80211_ibss_join(struct ieee80211_sub_if_data *sdata,
 	memcpy(sdata->u.ibss.ssid, params->ssid, params->ssid_len);
 	sdata->u.ibss.ssid_len = params->ssid_len;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(3,12,0)
 	memcpy(&sdata->u.ibss.ht_capa, &params->ht_capa,
 	       sizeof(sdata->u.ibss.ht_capa));
 	memcpy(&sdata->u.ibss.ht_capa_mask, &params->ht_capa_mask,
 	       sizeof(sdata->u.ibss.ht_capa_mask));
+#endif
 
 	/*
 	 * 802.11n-2009 9.13.3.1: In an IBSS, the HT Protection field is
diff --git a/net/mac80211/ieee80211_i.h b/net/mac80211/ieee80211_i.h
index ef035d40f405..164537e79d71 100644
--- a/net/mac80211/ieee80211_i.h
+++ b/net/mac80211/ieee80211_i.h
@@ -1123,12 +1123,31 @@ enum mac80211_scan_state {
 	SCAN_ABORT,
 };
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+/* private copy of a cfg80211 structure */
+struct cfg80211_registered_device {
+	struct list_head list;
+
+	/*
+	 * the driver requests the regulatory core to set this regulatory
+	 * domain as the wiphy's. Only used for %REGULATORY_WIPHY_SELF_MANAGED
+	 * devices using the regulatory_set_wiphy_regd() API
+	 */
+	const struct ieee80211_regdomain *requested_regd;
+};
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 struct ieee80211_local {
 	/* embed the driver visible part.
 	 * don't cast (use the static inlines below), but we keep
 	 * it first anyway so they become a no-op */
 	struct ieee80211_hw hw;
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	/* used for internal mac80211 LAR implementation */
+	struct cfg80211_registered_device rdev;
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	struct fq fq;
 	struct codel_vars *cvars;
 	struct codel_params cparams;
@@ -2095,8 +2114,10 @@ void ieee80211_txq_purge(struct ieee80211_local *local,
 			 struct txq_info *txqi);
 void ieee80211_txq_remove_vlan(struct ieee80211_local *local,
 			       struct ieee80211_sub_if_data *sdata);
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_fill_txq_stats(struct cfg80211_txq_stats *txqstats,
 			      struct txq_info *txqi);
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 void ieee80211_wake_txqs(unsigned long data);
 void ieee80211_send_auth(struct ieee80211_sub_if_data *sdata,
 			 u16 transaction, u16 auth_alg, u16 status,
@@ -2228,14 +2249,26 @@ enum nl80211_chan_width ieee80211_get_sta_bw(struct ieee80211_sta *sta);
 void ieee80211_recalc_chanctx_chantype(struct ieee80211_local *local,
 				       struct ieee80211_chanctx *ctx);
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+/* LAR private implementation */
+void intel_regulatory_deregister(struct ieee80211_local *local);
+void intel_regulatory_register(struct ieee80211_local *local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 /* TDLS */
 int ieee80211_tdls_mgmt(struct wiphy *wiphy, struct net_device *dev,
-			const u8 *peer, u8 action_code, u8 dialog_token,
-			u16 status_code, u32 peer_capability,
-			bool initiator, const u8 *extra_ies,
+			const_since_3_16 u8 *peer, u8 action_code, u8 dialog_token,
+			u16 status_code,
+#if CFG80211_VERSION >= KERNEL_VERSION(3,15,0)
+			u32 peer_capability,
+#endif
+#if CFG80211_VERSION >= KERNEL_VERSION(3,17,0)
+			bool initiator,
+#endif
+			const u8 *extra_ies,
 			size_t extra_ies_len);
 int ieee80211_tdls_oper(struct wiphy *wiphy, struct net_device *dev,
-			const u8 *peer, enum nl80211_tdls_operation oper);
+			const_since_3_16 u8 *peer, enum nl80211_tdls_operation oper);
 void ieee80211_tdls_peer_del_work(struct work_struct *wk);
 int ieee80211_tdls_channel_switch(struct wiphy *wiphy, struct net_device *dev,
 				  const u8 *addr, u8 oper_class,
diff --git a/net/mac80211/main.c b/net/mac80211/main.c
index 5c5197562447..82f962f00cdd 100644
--- a/net/mac80211/main.c
+++ b/net/mac80211/main.c
@@ -659,7 +659,9 @@ struct ieee80211_hw *ieee80211_alloc_hw_nm(size_t priv_data_len,
 	local->hw.uapsd_max_sp_len = IEEE80211_DEFAULT_MAX_SP_LEN;
 	local->user_power_level = IEEE80211_UNSET_POWER_LEVEL;
 	wiphy->ht_capa_mod_mask = &mac80211_ht_capa_mod_mask;
+#if CFG80211_VERSION >= KERNEL_VERSION(3,10,0)
 	wiphy->vht_capa_mod_mask = &mac80211_vht_capa_mod_mask;
+#endif
 
 	local->ext_capa[7] = WLAN_EXT_CAPA8_OPMODE_NOTIF;
 
@@ -918,7 +920,11 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 		return -EINVAL;
 
 #ifdef CONFIG_PM
-	if (hw->wiphy->wowlan && (!local->ops->suspend || !local->ops->resume))
+	if (
+#if CFG80211_VERSION >= KERNEL_VERSION(3,11,0)
+	    hw->wiphy->wowlan &&
+#endif
+	    (!local->ops->suspend || !local->ops->resume))
 		return -EINVAL;
 #endif
 
@@ -946,9 +952,11 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 
 			comb = &local->hw.wiphy->iface_combinations[i];
 
+#if CFG80211_VERSION > KERNEL_VERSION(3,9,0)
 			if (comb->radar_detect_widths &&
 			    comb->num_different_channels > 1)
 				return -EINVAL;
+#endif
 		}
 	}
 
@@ -1158,6 +1166,7 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 	if (ieee80211_hw_check(&local->hw, CHANCTX_STA_CSA))
 		local->ext_capa[0] |= WLAN_EXT_CAPA1_EXT_CHANNEL_SWITCHING;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	/* mac80211 supports multi BSSID, if the driver supports it */
 	if (ieee80211_hw_check(&local->hw, SUPPORTS_MULTI_BSSID)) {
 		local->hw.wiphy->support_mbssid = true;
@@ -1168,8 +1177,11 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 			local->ext_capa[2] |=
 				WLAN_EXT_CAPA3_MULTI_BSSID_SUPPORT;
 	}
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(3,16,0)
 	local->hw.wiphy->max_num_csa_counters = IEEE80211_MAX_CSA_COUNTERS_NUM;
+#endif
 
 	result = wiphy_register(local->hw.wiphy);
 	if (result < 0)
@@ -1314,6 +1326,10 @@ int ieee80211_register_hw(struct ieee80211_hw *hw)
 		goto fail_ifa6;
 #endif
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	intel_regulatory_register(local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	return 0;
 
 #if IS_ENABLED(CONFIG_IPV6)
@@ -1428,6 +1444,10 @@ void ieee80211_free_hw(struct ieee80211_hw *hw)
 		kfree(local->hw.wiphy->bands[band]);
 	}
 
+#if CFG80211_VERSION < KERNEL_VERSION(4,0,0)
+	intel_regulatory_deregister(local);
+#endif /* CFG80211_VERSION < KERNEL_VERSION(4,0,0) */
+
 	wiphy_free(local->hw.wiphy);
 }
 EXPORT_SYMBOL(ieee80211_free_hw);
diff --git a/net/mac80211/mlme.c b/net/mac80211/mlme.c
index e7ac6113fcce..c3c5d103fa5a 100644
--- a/net/mac80211/mlme.c
+++ b/net/mac80211/mlme.c
@@ -3376,6 +3376,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		/* TODO: OPEN: what happens if BSS color disable is set? */
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (cbss->transmitted_bss) {
 		bss_conf->nontransmitted = true;
 		ether_addr_copy(bss_conf->transmitter_bssid,
@@ -3383,6 +3384,7 @@ static bool ieee80211_assoc_success(struct ieee80211_sub_if_data *sdata,
 		bss_conf->bssid_indicator = cbss->max_bssid_indicator;
 		bss_conf->bssid_index = cbss->bssid_index;
 	}
+#endif
 
 	/*
 	 * Some APs, e.g. Netgear WNDR3700, report invalid HT operation data
@@ -3774,9 +3776,13 @@ static bool ieee80211_rx_our_beacon(const u8 *tx_bssid,
 {
 	if (ether_addr_equal(tx_bssid, bss->bssid))
 		return true;
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (!bss->transmitted_bss)
 		return false;
 	return ether_addr_equal(tx_bssid, bss->transmitted_bss->bssid);
+#else
+	return false;
+#endif
 }
 
 static void ieee80211_rx_mgmt_beacon(struct ieee80211_sub_if_data *sdata,
@@ -5333,9 +5339,11 @@ int ieee80211_mgd_assoc(struct ieee80211_sub_if_data *sdata,
 	memcpy(&ifmgd->ht_capa_mask, &req->ht_capa_mask,
 	       sizeof(ifmgd->ht_capa_mask));
 
+#if CFG80211_VERSION >= KERNEL_VERSION(3,10,0)
 	memcpy(&ifmgd->vht_capa, &req->vht_capa, sizeof(ifmgd->vht_capa));
 	memcpy(&ifmgd->vht_capa_mask, &req->vht_capa_mask,
 	       sizeof(ifmgd->vht_capa_mask));
+#endif
 
 	if (req->ie && req->ie_len) {
 		memcpy(assoc_data->ie, req->ie, req->ie_len);
diff --git a/net/mac80211/offchannel.c b/net/mac80211/offchannel.c
index 65650281558d..9fa4af34350a 100644
--- a/net/mac80211/offchannel.c
+++ b/net/mac80211/offchannel.c
@@ -887,6 +887,7 @@ int ieee80211_mgmt_tx(struct wiphy *wiphy, struct wireless_dev *wdev,
 
 	data = skb_put_data(skb, params->buf, params->len);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(3,16,0)
 	/* Update CSA counters */
 	if (sdata->vif.csa_active &&
 	    (sdata->vif.type == NL80211_IFTYPE_AP ||
@@ -912,6 +913,7 @@ int ieee80211_mgmt_tx(struct wiphy *wiphy, struct wireless_dev *wdev,
 
 		rcu_read_unlock();
 	}
+#endif
 
 	IEEE80211_SKB_CB(skb)->flags = flags;
 
diff --git a/net/mac80211/scan.c b/net/mac80211/scan.c
index 3b921cbfadf5..cc0d8baac993 100644
--- a/net/mac80211/scan.c
+++ b/net/mac80211/scan.c
@@ -208,12 +208,14 @@ ieee80211_bss_info_update(struct ieee80211_local *local,
 	bss = (void *)cbss->priv;
 	ieee80211_update_bss_from_elems(local, bss, &elems, rx_status, beacon);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	list_for_each_entry(non_tx_cbss, &cbss->nontrans_list, nontrans_list) {
 		non_tx_bss = (void *)non_tx_cbss->priv;
 
 		ieee80211_update_bss_from_elems(local, non_tx_bss, &elems,
 						rx_status, beacon);
 	}
+#endif
 
 	return bss;
 }
@@ -1127,7 +1129,9 @@ int ieee80211_request_ibss_scan(struct ieee80211_sub_if_data *sdata,
 
 	local->int_scan_req->ssids = &local->scan_ssid;
 	local->int_scan_req->n_ssids = 1;
+#if CFG80211_VERSION >= KERNEL_VERSION(3,12,0)
 	local->int_scan_req->scan_width = scan_width;
+#endif
 	memcpy(local->int_scan_req->ssids[0].ssid, ssid, IEEE80211_MAX_SSID_LEN);
 	local->int_scan_req->ssids[0].ssid_len = ssid_len;
 
diff --git a/net/mac80211/sta_info.c b/net/mac80211/sta_info.c
index 39b3b9d28587..030bde8092c1 100644
--- a/net/mac80211/sta_info.c
+++ b/net/mac80211/sta_info.c
@@ -390,6 +390,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 	if (sta_prepare_rate_control(local, sta, gfp))
 		goto free_txq;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	sta->airtime_weight = IEEE80211_DEFAULT_AIRTIME_WEIGHT;
 
 	for (i = 0; i < IEEE80211_NUM_ACS; i++) {
@@ -397,6 +398,7 @@ struct sta_info *sta_info_alloc(struct ieee80211_sub_if_data *sdata,
 		skb_queue_head_init(&sta->tx_filtered[i]);
 		sta->airtime[i].deficit = sta->airtime_weight;
 	}
+#endif
 
 	for (i = 0; i < IEEE80211_NUM_TIDS; i++)
 		sta->last_seq_ctrl[i] = cpu_to_le16(USHRT_MAX);
@@ -2074,22 +2076,28 @@ static void sta_stats_decode_rate(struct ieee80211_local *local, u32 rate,
 
 		sband = local->hw.wiphy->bands[band];
 		brate = sband->bitrates[rate_idx].bitrate;
+#if CFG80211_VERSION >= KERNEL_VERSION(4,0,0)
 		if (rinfo->bw == RATE_INFO_BW_5)
 			shift = 2;
 		else if (rinfo->bw == RATE_INFO_BW_10)
 			shift = 1;
 		else
+#endif
 			shift = 0;
 		rinfo->legacy = DIV_ROUND_UP(brate, 1 << shift);
 		break;
 		}
 	case STA_STATS_RATE_TYPE_HE:
+#if CFG80211_VERSION >= KERNEL_VERSION(4,19,0)
 		rinfo->flags = RATE_INFO_FLAGS_HE_MCS;
 		rinfo->mcs = STA_STATS_GET(HE_MCS, rate);
 		rinfo->nss = STA_STATS_GET(HE_NSS, rate);
 		rinfo->he_gi = STA_STATS_GET(HE_GI, rate);
 		rinfo->he_ru_alloc = STA_STATS_GET(HE_RU, rate);
 		rinfo->he_dcm = STA_STATS_GET(HE_DCM, rate);
+#else
+		WARN_ONCE(1, "HE not supported on this cfg80211 version\n");
+#endif
 		break;
 	}
 }
@@ -2139,6 +2147,7 @@ static void sta_set_tidstats(struct sta_info *sta,
 		tidstats->tx_msdu_failed = sta->status_stats.msdu_failed[tid];
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	if (local->ops->wake_tx_queue && tid < IEEE80211_NUM_TIDS) {
 		spin_lock_bh(&local->fq.lock);
 		rcu_read_lock();
@@ -2150,6 +2159,7 @@ static void sta_set_tidstats(struct sta_info *sta,
 		rcu_read_unlock();
 		spin_unlock_bh(&local->fq.lock);
 	}
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 }
 
 static inline u64 sta_get_stats_bytes(struct ieee80211_sta_rx_stats *rxstats)
@@ -2256,6 +2266,7 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_TX_FAILED);
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,1,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_RX_DURATION))) {
 		for (ac = 0; ac < IEEE80211_NUM_ACS; ac++)
 			sinfo->rx_duration += sta->airtime[ac].rx_airtime;
@@ -2272,6 +2283,7 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->airtime_weight = sta->airtime_weight;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_AIRTIME_WEIGHT);
 	}
+#endif
 
 	sinfo->rx_dropped_misc = sta->rx_stats.dropped;
 	if (sta->pcpu_rx_stats) {
@@ -2406,12 +2418,15 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->expected_throughput = thr;
 	}
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,17,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL)) &&
 	    sta->status_stats.ack_signal_filled) {
 		sinfo->ack_signal = sta->status_stats.last_ack_signal;
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL);
 	}
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,20,0)
 	if (!(sinfo->filled & BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG)) &&
 	    sta->status_stats.ack_signal_filled) {
 		sinfo->avg_ack_signal =
@@ -2420,12 +2435,15 @@ void sta_set_sinfo(struct sta_info *sta, struct station_info *sinfo,
 		sinfo->filled |=
 			BIT_ULL(NL80211_STA_INFO_ACK_SIGNAL_AVG);
 	}
+#endif
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	if (ieee80211_vif_is_mesh(&sdata->vif)) {
 		sinfo->filled |= BIT_ULL(NL80211_STA_INFO_AIRTIME_LINK_METRIC);
 		sinfo->airtime_link_metric =
 			airtime_link_metric_get(local, sta);
 	}
+#endif
 }
 
 u32 sta_get_expected_throughput(struct sta_info *sta)
diff --git a/net/mac80211/tdls.c b/net/mac80211/tdls.c
index fca1f5477396..550cedb0c13a 100644
--- a/net/mac80211/tdls.c
+++ b/net/mac80211/tdls.c
@@ -1067,7 +1067,7 @@ fail:
 
 static int
 ieee80211_tdls_mgmt_setup(struct wiphy *wiphy, struct net_device *dev,
-			  const u8 *peer, u8 action_code, u8 dialog_token,
+			  const_since_3_16 u8 *peer, u8 action_code, u8 dialog_token,
 			  u16 status_code, u32 peer_capability, bool initiator,
 			  const u8 *extra_ies, size_t extra_ies_len)
 {
@@ -1185,12 +1185,23 @@ ieee80211_tdls_mgmt_teardown(struct wiphy *wiphy, struct net_device *dev,
 }
 
 int ieee80211_tdls_mgmt(struct wiphy *wiphy, struct net_device *dev,
-			const u8 *peer, u8 action_code, u8 dialog_token,
-			u16 status_code, u32 peer_capability,
-			bool initiator, const u8 *extra_ies,
-			size_t extra_ies_len)
+			const_since_3_16 u8 *peer, u8 action_code, u8 dialog_token,
+			u16 status_code,
+#if CFG80211_VERSION >= KERNEL_VERSION(3,15,0)
+			u32 peer_capability,
+#endif
+#if CFG80211_VERSION >= KERNEL_VERSION(3,17,0)
+			bool initiator,
+#endif
+			const u8 *extra_ies, size_t extra_ies_len)
 {
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
+#if CFG80211_VERSION < KERNEL_VERSION(3,15,0)
+	u32 peer_capability = 0;
+#endif
+#if CFG80211_VERSION < KERNEL_VERSION(3,17,0)
+	bool initiator = false;
+#endif
 	int ret;
 
 	if (!(wiphy->flags & WIPHY_FLAG_SUPPORTS_TDLS))
@@ -1340,7 +1351,7 @@ iee80211_tdls_recalc_ht_protection(struct ieee80211_sub_if_data *sdata,
 }
 
 int ieee80211_tdls_oper(struct wiphy *wiphy, struct net_device *dev,
-			const u8 *peer, enum nl80211_tdls_operation oper)
+			const_since_3_16 u8 *peer, enum nl80211_tdls_operation oper)
 {
 	struct sta_info *sta;
 	struct ieee80211_sub_if_data *sdata = IEEE80211_DEV_TO_SUB_IF(dev);
diff --git a/net/mac80211/trace.h b/net/mac80211/trace.h
index 009578490e67..af821947930d 100644
--- a/net/mac80211/trace.h
+++ b/net/mac80211/trace.h
@@ -1800,8 +1800,8 @@ TRACE_EVENT(drv_start_nan,
 		VIF_ASSIGN;
 		__entry->master_pref = conf->master_pref;
 		__entry->bands = conf->bands;
-		__entry->cdw_2g = conf->cdw_2g;
-		__entry->cdw_5g = conf->cdw_5g;
+		__entry->cdw_2g = nan_conf_cdw_2g(conf);
+		__entry->cdw_5g = nan_conf_cdw_5g(conf);
 	),
 
 	TP_printk(
@@ -1857,8 +1857,8 @@ TRACE_EVENT(drv_nan_change_conf,
 		VIF_ASSIGN;
 		__entry->master_pref = conf->master_pref;
 		__entry->bands = conf->bands;
-		__entry->cdw_2g = conf->cdw_2g;
-		__entry->cdw_5g = conf->cdw_5g;
+		__entry->cdw_2g = nan_conf_cdw_2g(conf);
+		__entry->cdw_5g = nan_conf_cdw_5g(conf);
 		__entry->changes = changes;
 	),
 
diff --git a/net/mac80211/tx.c b/net/mac80211/tx.c
index 10cb9a3ea2fb..b51b42df730d 100644
--- a/net/mac80211/tx.c
+++ b/net/mac80211/tx.c
@@ -1499,6 +1499,7 @@ void ieee80211_txq_purge(struct ieee80211_local *local,
 	spin_unlock_bh(&local->active_txq_lock[txqi->txq.ac]);
 }
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 void ieee80211_txq_set_params(struct ieee80211_local *local)
 {
 	if (local->hw.wiphy->txq_limit)
@@ -1516,6 +1517,7 @@ void ieee80211_txq_set_params(struct ieee80211_local *local)
 	else
 		local->hw.wiphy->txq_quantum = local->fq.quantum;
 }
+#endif /* CFG80211_VERSION >= KERNEL_VERSION(4,18,0) */
 
 int ieee80211_txq_setup_flows(struct ieee80211_local *local)
 {
@@ -1566,7 +1568,9 @@ int ieee80211_txq_setup_flows(struct ieee80211_local *local)
 	for (i = 0; i < fq->flows_cnt; i++)
 		codel_vars_init(&local->cvars[i]);
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,0)
 	ieee80211_txq_set_params(local);
+#endif
 
 	return 0;
 }
diff --git a/net/mac80211/util.c b/net/mac80211/util.c
index efa2c7c3b4c8..e5c7670c798e 100644
--- a/net/mac80211/util.c
+++ b/net/mac80211/util.c
@@ -907,10 +907,12 @@ _ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
 		u8 elen = elem->datalen;
 		const u8 *pos = elem->data;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 		if (check_inherit &&
 		    !cfg80211_is_element_inherited(elem,
 						   check_inherit))
 			continue;
+#endif
 
 		switch (id) {
 		case WLAN_EID_SSID:
@@ -1257,6 +1259,7 @@ static size_t ieee802_11_find_bssid_profile(const u8 *start, size_t len,
 					    u8 *bss_bssid,
 					    u8 *nontransmitted_profile)
 {
+#if CFG80211_VERSION >= KERNEL_VERSION(5,2,0)
 	const struct element *elem, *sub;
 	size_t profile_len = 0;
 	bool found = false;
@@ -1317,6 +1320,9 @@ static size_t ieee802_11_find_bssid_profile(const u8 *start, size_t len,
 	}
 
 	return found ? profile_len : 0;
+#else
+	return 0;
+#endif
 }
 
 u32 ieee802_11_parse_elems_crc(const u8 *start, size_t len, bool action,
@@ -1390,6 +1396,7 @@ void ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *sdata,
 	    sdata->vif.type != NL80211_IFTYPE_STATION)
 		return;
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,17,0)
 	rcu_read_lock();
 	chanctx_conf = rcu_dereference(sdata->vif.chanctx_conf);
 	if (chanctx_conf)
@@ -1402,20 +1409,33 @@ void ieee80211_regulatory_limit_wmm_params(struct ieee80211_sub_if_data *sdata,
 
 	rrule = freq_reg_info(sdata->wdev.wiphy, MHZ_TO_KHZ(center_freq));
 
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 	if (IS_ERR_OR_NULL(rrule) || !rrule->has_wmm) {
+#else
+	if (IS_ERR_OR_NULL(rrule) || !rrule->wmm_rule) {
+#endif
 		rcu_read_unlock();
 		return;
 	}
 
 	if (sdata->vif.type == NL80211_IFTYPE_AP)
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 		wmm_ac = &rrule->wmm_rule.ap[ac];
+#else
+		wmm_ac = &rrule->wmm_rule->ap[ac];
+#endif
 	else
+#if CFG80211_VERSION >= KERNEL_VERSION(4,18,13)
 		wmm_ac = &rrule->wmm_rule.client[ac];
+#else
+		wmm_ac = &rrule->wmm_rule->client[ac];
+#endif
 	qparam->cw_min = max_t(u16, qparam->cw_min, wmm_ac->cw_min);
 	qparam->cw_max = max_t(u16, qparam->cw_max, wmm_ac->cw_max);
 	qparam->aifs = max_t(u8, qparam->aifs, wmm_ac->aifsn);
 	qparam->txop = min_t(u16, qparam->txop, wmm_ac->cot / 32);
 	rcu_read_unlock();
+#endif
 }
 
 void ieee80211_set_wmm_default(struct ieee80211_sub_if_data *sdata,
@@ -2431,7 +2451,10 @@ int ieee80211_reconfig(struct ieee80211_local *local)
 		 * scan plan was currently running (and some scan plans may have
 		 * already finished).
 		 */
-		if (sched_scan_req->n_scan_plans > 1 ||
+		if (
+#if CFG80211_VERSION >= KERNEL_VERSION(4,4,0)
+		    sched_scan_req->n_scan_plans > 1 ||
+#endif
 		    __ieee80211_request_sched_scan_start(sched_scan_sdata,
 							 sched_scan_req)) {
 			RCU_INIT_POINTER(local->sched_scan_sdata, NULL);
